variant: flatcar
version: 1.0.0
systemd:
  units:
    - name: etcd-member.service
      enabled: true
      contents: |
        [Unit]
        Description=etcd (System Container)
        Documentation=https://github.com/etcd-io/etcd
        Requires=docker.service
        After=docker.service
        [Service]
        Environment=ETCD_IMAGE=quay.io/coreos/etcd:v3.5.7
        ConditionPathExists=/etc/etcd/etcd.env
        ExecStartPre=/usr/bin/docker run -d \
          --name etcd \
          --network host \
          --env-file /etc/etcd/etcd.env \
          --user 232:232 \
          --volume /etc/ssl/etcd:/etc/ssl/certs:ro \
          --volume /var/lib/etcd:/var/lib/etcd:rw \
          $${ETCD_IMAGE}
        ExecStart=docker logs -f etcd
        ExecStop=docker stop etcd
        ExecStopPost=docker rm etcd
        Restart=always
        RestartSec=10s
        TimeoutStartSec=0
        LimitNOFILE=40000
        [Install]
        WantedBy=multi-user.target
    - name: docker.service
      enabled: true
    - name: locksmithd.service
      mask: true
    - name: kubelet.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: wait-for-dns.service
      enabled: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
        RequiredBy=etcd-member.service
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet (System Container)
        Requires=docker.service
        After=docker.service
        Wants=rpc-statd.service
        [Service]
        Environment=KUBELET_IMAGE=quay.io/poseidon/kubelet:v1.26.3
        ConditionPathExists=/etc/kubernetes/kubeconfig
        ExecStartPre=/bin/mkdir -p /etc/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /var/lib/calico
        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /${etc}/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /${etc}/kubernetes/ca.crt"
        ExecStartPre=/usr/bin/docker run -d \
          --name kubelet \
          --privileged \
          --pid host \
          --network host \
          -v /etc/cni/net.d:/etc/cni/net.d:ro \
          -v /etc/kubernetes:/etc/kubernetes:ro \
          -v /etc/machine-id:/etc/machine-id:ro \
          -v /usr/lib/os-release:/etc/os-release:ro \
          -v /lib/modules:/lib/modules:ro \
          -v /run:/run \
          -v /sys/fs/cgroup:/sys/fs/cgroup \
          -v /var/lib/calico:/var/lib/calico:ro \
          -v /var/lib/containerd:/var/lib/containerd \
          -v /var/lib/kubelet:/var/lib/kubelet:rshared \
          -v /var/log:/var/log \
          -v /opt/cni/bin:/opt/cni/bin \
          $${KUBELET_IMAGE} \
          --bootstrap-kubeconfig=/etc/kubernetes/kubeconfig \
          --config=/etc/kubernetes/kubelet.yaml \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
          --hostname-override=${domain_name} \
          --kubeconfig=/var/lib/kubelet/kubeconfig \
          --node-labels=node.kubernetes.io/controller="true" \
          --register-with-taints=node-role.kubernetes.io/controller=:NoSchedule
        ExecStart=docker logs -f kubelet
        ExecStop=docker stop kubelet
        ExecStopPost=docker rm kubelet
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: bootstrap.service
      contents: |
        [Unit]
        Description=Kubernetes control plane
        Wants=docker.service
        After=docker.service kubelet.service
        ConditionPathExists=!/opt/bootstrap/bootstrap.done
        [Service]
        Type=oneshot
        RemainAfterExit=true
        WorkingDirectory=/opt/bootstrap
        Environment=KUBELET_IMAGE=quay.io/poseidon/kubelet:v1.26.3
        ExecStart=/usr/bin/docker run \
            -v /etc/kubernetes/pki:/etc/kubernetes/pki:ro \
            -v /${opt}/bootstrap/assets:/assets:ro \
            -v /opt/bootstrap/apply:/apply:ro \
            --entrypoint=/apply \
            $${KUBELET_IMAGE}
        ExecStartPost=/bin/touch /opt/bootstrap/bootstrap.done
        [Install]
        WantedBy=multi-user.target
    %{ if ! enable_install }
    - name: update-engine.service
      mask: true
    - name: initialize_data.service
      enabled: true
      contents: |
        [Unit]
        Description= A service used to verify the existence of or prepare the SSH host keys on a persistent partition
        After=persist.mount
        Requires=persist.mount
        Before=sshd.service docker.service
        [Service]
        Type= oneshot
        ExecStart=/opt/initialize_disk
        RemainAfterExit= false
        [Install]
        WantedBy=multi-user.target
    %{ endif }
        
storage:
  %{if ! enable_install}
  disks:
    - device: ${persist_disk}
      wipe_table: false
      partitions:
        - number: 1
          label: persist
          size_mib: 4096
          start_mib: 0
          wipe_partition_entry: false
          should_exist: true
  filesystems:
    - device: /dev/disk/by-partlabel/persist
      path: /persist
      format: ext4
      label: persist
      wipe_filesystem: false
      with_mount_unit: true
  %{endif}
  directories:
    - path: /var/lib/etcd
      mode: 0700
      overwrite: true
    - path: /${etc}/kubernetes
      mode: 0755
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline:
          ${domain_name}
    - path: /opt/bootstrap/kubelet.yaml
      mode: 0644
      contents:
        inline: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: /etc/kubernetes/ca.crt
          authorization:
            mode: Webhook
          cgroupDriver: systemd
          clusterDNS:
            - ${cluster_dns_service_ip}
          clusterDomain: ${cluster_domain_suffix}
          healthzPort: 0
          rotateCertificates: true
          shutdownGracePeriod: 45s
          shutdownGracePeriodCriticalPods: 30s
          staticPodPath: /etc/kubernetes/manifests
          readOnlyPort: 0
          resolvConf: /run/systemd/resolve/resolv.conf
          volumePluginDir: /var/lib/kubelet/volumeplugins
    - path: /opt/bootstrap/layout
      mode: 0544
      contents:
        inline: |
          #!/bin/bash -e
          mkdir -p -- /home/core/auth /home/core/tls/etcd /home/core/tls/k8s /home/core/static-manifests /home/core/manifests/coredns /home/core/manifests-networking
          %{ if ! enable_install }
          PERST_DRIVE='/persist/'
          while [ ! -d "$PERST_DRIVE" ] ; do
              sleep 5
          done
          mkdir -p /${etc}/kubernetes
          chmod 755 /${etc}/kubernetes
          %{ endif }
          mkdir -p /${etc}/ssl/etcd/etcd
          mkdir -p /${etc}/kubernetes/pki
          mkdir -p /${etc}/kubernetes/manifests
          mkdir -p /${opt}/bootstrap/assets
          chmod -R 500 /${etc}/ssl/etcd
          chmod -R 700 /${var}/lib/etcd
          chown -R etcd:etcd /${etc}/ssl/etcd
          while [ ! -f "/home/core/kubeconfig" ] ; do
              sleep 1
            echo "Waiting for SSH file provisioning to finish"
          done
          cp /home/core/kubeconfig /${etc}/kubernetes/kubeconfig ;
          cp /opt/bootstrap/kubelet.yaml /${etc}/kubernetes/kubelet.yaml
          rm -rf /opt/bootstrap/kubelet.yaml
          rm -f /home/core/kubeconfig

          awk '/#####/ {filename=$2; next} {print > filename}' /home/core/assets
          cp /home/core/tls/etcd/{peer*,server*} /${etc}/ssl/etcd/etcd/
          cp /home/core/tls/etcd/etcd-client* /${etc}/kubernetes/pki/
          cp /home/core/auth/* /${etc}/kubernetes/pki/
          cp /home/core/tls/k8s/* /${etc}/kubernetes/pki/
          cp /home/core/static-manifests/* /${etc}/kubernetes/manifests/
          cp -r /home/core/manifests /${opt}/bootstrap/assets/manifests
          cp /home/core/manifests-networking/* /${opt}/bootstrap/assets/manifests
          rm -rf assets auth kubernetes manifests-networking static-manifests tls manifests
    - path: /opt/bootstrap/apply
      mode: 0544
      contents:
        inline: |
          #!/bin/bash -e
          export KUBECONFIG=/etc/kubernetes/pki/admin.conf
          until kubectl version; do
            echo "Waiting for static pod control plane"
            sleep 5
          done
          until kubectl apply -f /assets/manifests -R; do
             echo "Retry applying manifests"
             sleep 5
          done
    - path: /etc/systemd/logind.conf.d/inhibitors.conf
      contents:
        inline: |
          [Login]
          InhibitDelayMaxSec=45s
    - path: /etc/sysctl.d/max-user-watches.conf
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
    - path: /etc/etcd/etcd.env
      mode: 0644
      contents:
          inline: |
            ETCD_NAME=${etcd_name}
            ETCD_DATA_DIR=/var/lib/etcd
            ETCD_ADVERTISE_CLIENT_URLS=https://${domain_name}:2379
            ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${domain_name}:2380
            ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379
            ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380
            ETCD_LISTEN_METRICS_URLS=http://0.0.0.0:2381
            ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}
            ETCD_STRICT_RECONFIG_CHECK=true
            ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt
            ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt
            ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key
            ETCD_CLIENT_CERT_AUTH=true
            ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt
            ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt
            ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key
            ETCD_PEER_CLIENT_CERT_AUTH=true
    %{ if ! enable_install }
    - path: /opt/initialize_disk
      mode: 0544
      contents:
        inline: |
          #!/bin/sh -eu
          if [ ! -d /${etc}/sshd-config/ ] ;
          then
            echo "Generating SSH keys"
            mkdir -p /${etc}/sshd-config ;
            ssh-keygen -q -t rsa -f /${etc}/sshd-config/ssh_host_rsa_key -C "core@localhost" -N "" ;
            ssh-keygen -q -t dsa -f /${etc}/sshd-config/ssh_host_dsa_key -C "core@localhost" -N "" ;
            ssh-keygen -q -t ecdsa -f /${etc}/sshd-config/ssh_host_ecdsa_key -C "core@localhost" -N "" ;
            ssh-keygen -q -t ed25519 -f /${etc}/sshd-config/ssh_host_ed25519_key -C "core@localhost" -N "" ;
            chmod 744  -R /${etc}/sshd-config
            chmod 755 /${etc}/sshd-config/ssh_host_rsa_key.pub
            chmod 755 /${etc}/sshd-config/ssh_host_dsa_key.pub
            chmod 755 /${etc}/sshd-config/ssh_host_ecdsa_key.pub
            chmod 755 /${etc}/sshd-config/ssh_host_ed25519_key.pub
            chmod 600 /${etc}/sshd-config/ssh_host_rsa_key
            chmod 600 /${etc}/sshd-config/ssh_host_dsa_key
            chmod 600 /${etc}/sshd-config/ssh_host_ecdsa_key
            chmod 600 /${etc}/sshd-config/ssh_host_ed25519_key
            echo "Finished generating SSH keys"
          fi
          # replace the empty kubernetes folder with a symlink to our persistent folder 
          echo "Creating symbolic links"
          rm -rf /etc/kubernetes
          ln -s /${etc}/kubernetes /etc/kubernetes
          rm -rf /etc/ssl/etcd
          ln -s /${etc}/ssl/etcd /etc/ssl/etcd
          rm -rf /opt/bootstrap/assets
          ln -s /${opt}/bootstrap/assets /opt/bootstrap/assets
          # do the same with the etcd store for our persistent folder to
          # keep ressources defined with kubectl apply
          mkdir -p /${var}/lib/
          if [ -z "$(sudo ls -A /${var}/lib/etcd)" ] ; then
            # make sure we only take all the data from etcd
            # when we first boot and not at every boot
            sudo mv /var/lib/etcd /${var}/lib/
          fi
          sudo rm -rf /var/lib/etcd/
          sudo ln -s /${var}/lib/etcd /var/lib/
    - path: /etc/ssh/sshd_config.d/host_key_config.conf
      mode: 0444
      contents:
        inline: |
          HostKey /${etc}/sshd-config/ssh_host_rsa_key
          HostKey /${etc}/sshd-config/ssh_host_dsa_key
          HostKey /${etc}/sshd-config/ssh_host_ecdsa_key
          HostKey /${etc}/sshd-config/ssh_host_ed25519_key 
    - path: /etc/ssh/sshd_config
      mode: 0444
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          # handled by PAM
          PrintLastLog no
          # handled by PAM
          PrintMotd no
          Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
          MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512,umac-128-etm@openssh.com,umac-128@openssh.com
          KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256

          # Temporarily accept ssh-rsa algorithm for openssh >= 8.8,
          # until most ssh clients could deprecate ssh-rsa.
          HostkeyAlgorithms +ssh-rsa
          PubkeyAcceptedAlgorithms +ssh-rsa
          Include /etc/ssh/sshd_config.d/*.conf

          PermitRootLogin no
          PasswordAuthentication no
          ChallengeResponseAuthentication no
%{ endif }
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ${ssh_authorized_key}
