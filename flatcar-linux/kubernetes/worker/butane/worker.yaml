variant: flatcar
version: 1.0.0
systemd:
  units:
    - name: docker.service
      enabled: true
    - name: locksmithd.service
      mask: true
    - name: kubelet.path
      enabled: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: wait-for-dns.service
      enabled: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
      %{ if ! enable_install }
        After=persist.mount
        Requires=persist.mount
      %{endif}
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.service
      enabled: true
      contents: |
        [Unit]
        Description=Kubelet
        Requires=docker.service
        After=docker.service
        Wants=rpc-statd.service
        [Service]
        Environment=KUBELET_IMAGE=quay.io/poseidon/kubelet:v1.26.3
        ExecStartPre=/bin/mkdir -p /etc/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/mkdir -p /var/lib/calico
        ExecStartPre=/bin/mkdir -p /var/lib/kubelet/volumeplugins
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        # Podman, rkt, or runc run container processes, whereas docker run
        # is a client to a daemon and requires workarounds to use within a
        # systemd unit. https://github.com/moby/moby/issues/6791
        ExecStartPre=/usr/bin/docker run -d \
          --name kubelet \
          --privileged \
          --pid host \
          --network host \
          -v /etc/cni/net.d:/etc/cni/net.d:ro \
          -v /etc/kubernetes:/etc/kubernetes:ro \
          -v /etc/machine-id:/etc/machine-id:ro \
          -v /usr/lib/os-release:/etc/os-release:ro \
          -v /lib/modules:/lib/modules:ro \
          -v /run:/run \
          -v /sys/fs/cgroup:/sys/fs/cgroup \
          -v /var/lib/calico:/var/lib/calico:ro \
          -v /var/lib/containerd:/var/lib/containerd \
          -v /var/lib/kubelet:/var/lib/kubelet:rshared \
          -v /var/log:/var/log \
          -v /opt/cni/bin:/opt/cni/bin \
          $${KUBELET_IMAGE} \
          --bootstrap-kubeconfig=/etc/kubernetes/kubeconfig \
          --config=/etc/kubernetes/kubelet.yaml \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
          --hostname-override=${domain_name} \
          --kubeconfig=/var/lib/kubelet/kubeconfig \
          --node-labels=node.kubernetes.io/node \
          %{~ for label in compact(split(",", node_labels)) ~}
          --node-labels=${label} \
          %{~ endfor ~}
          %{~ for taint in compact(split(",", node_taints)) ~}
          --register-with-taints=${taint} \
          %{~ endfor ~}
          --node-labels=node.kubernetes.io/node
        ExecStart=docker logs -f kubelet
        ExecStop=docker stop kubelet
        ExecStopPost=docker rm kubelet
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target
    %{ if ! enable_install }
    - name: update-engine.service
      mask: true
    - name: initialize_data.service
      enabled: true
      contents: |
        [Unit]
        Description= A service used to prepare the SSH host keys on the persistent partition
        Before=sshd.service docker.service
        [Service]
        Type= oneshot
        ExecStart=/opt/initialize_disk
        RemainAfterExit= false
        [Install]
        WantedBy=multi-user.target
%{ endif }
storage:
  %{if ! enable_install}
  disks:
    - device: ${persist_disk}
      wipe_table: false
      partitions:
        - number: 1
          label: persist
          size_mib: 4096
          start_mib: 0
          wipe_partition_entry: false
          should_exist: true
  filesystems:
    - device: /dev/disk/by-partlabel/persist
      path: /persist
      format: ext4
      label: persist
      wipe_filesystem: false
      with_mount_unit: true
%{endif}
  directories:
    - path: /etc/kubernetes
      mode: 0755
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline:
          ${domain_name}
    - path: /opt/bootstrap/kubelet.yaml
      mode: 0644
      contents:
        inline: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: /etc/kubernetes/ca.crt
          authorization:
            mode: Webhook
          cgroupDriver: systemd
          clusterDNS:
            - ${cluster_dns_service_ip}
          clusterDomain: ${cluster_domain_suffix}
          healthzPort: 0
          rotateCertificates: true
          shutdownGracePeriod: 45s
          shutdownGracePeriodCriticalPods: 30s
          staticPodPath: /etc/kubernetes/manifests
          readOnlyPort: 0
          resolvConf: /run/systemd/resolve/resolv.conf
          volumePluginDir: /var/lib/kubelet/volumeplugins
    - path: /etc/systemd/logind.conf.d/inhibitors.conf
      contents:
        inline: |
          [Login]
          InhibitDelayMaxSec=45s
    - path: /etc/sysctl.d/max-user-watches.conf
      mode: 0644
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
    - path: /opt/layout
      mode: 0544
      contents:
        inline: |
          #!/bin/sh -eu
          mkdir -p /${etc}/kubernetes
          while [ ! -f "/home/core/kubeconfig" ]; do
              sleep 1
            echo "Waiting for SSH file providing to finish"
          done
          cp /home/core/kubeconfig /${etc}/kubernetes/kubeconfig ;
          cp /opt/bootstrap/kubelet.yaml /${etc}/kubernetes/kubelet.yaml
          rm /home/core/kubeconfig
          rm /opt/bootstrap/kubelet.yaml
  %{ if ! enable_install }
    - path: /opt/initialize_disk
      mode: 0544
      contents:
        inline: |
          #!/bin/sh -eu
          if [ ! -d /${etc}/sshd-config/ ] ;
          then
            echo "Generating SSH keys"
            mkdir -p /${etc}/sshd-config ;
            ssh-keygen -q -t rsa -f /${etc}/sshd-config/ssh_host_rsa_key -C "core@localhost" -N "" ;
            ssh-keygen -q -t dsa -f /${etc}/sshd-config/ssh_host_dsa_key -C "core@localhost" -N "" ;
            ssh-keygen -q -t ecdsa -f /${etc}/sshd-config/ssh_host_ecdsa_key -C "core@localhost" -N "" ;
            ssh-keygen -q -t ed25519 -f /${etc}/sshd-config/ssh_host_ed25519_key -C "core@localhost" -N "" ;
            chmod 744  -R /${etc}/sshd-config
            chmod 755 /${etc}/sshd-config/ssh_host_rsa_key.pub
            chmod 755 /${etc}/sshd-config/ssh_host_dsa_key.pub
            chmod 755 /${etc}/sshd-config/ssh_host_ecdsa_key.pub
            chmod 755 /${etc}/sshd-config/ssh_host_ed25519_key.pub
            chmod 600 /${etc}/sshd-config/ssh_host_rsa_key
            chmod 600 /${etc}/sshd-config/ssh_host_dsa_key
            chmod 600 /${etc}/sshd-config/ssh_host_ecdsa_key
            chmod 600 /${etc}/sshd-config/ssh_host_ed25519_key
            echo "Finished generating SSH keys"
          fi
          # replaces the empty kubernetes folder with a symlink to our persistent folder
          echo "Prepare layout"
          mkdir -p /${etc}/kubernetes
          echo "Creating symbolic links"
          rm -rf /etc/kubernetes
          ln -s /${etc}/kubernetes /etc/kubernetes
    - path: /etc/ssh/sshd_config.d/host_key_config.conf
      mode: 0444
      contents:
        inline: |
          HostKey /${etc}/sshd-config/ssh_host_rsa_key
          HostKey /${etc}/sshd-config/ssh_host_dsa_key
          HostKey /${etc}/sshd-config/ssh_host_ecdsa_key
          HostKey /${etc}/sshd-config/ssh_host_ed25519_key
    - path: /etc/ssh/sshd_config
      mode: 0444
      contents:
        inline: |
          # Use most defaults for sshd configuration.
          UsePrivilegeSeparation sandbox
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          # handled by PAM
          PrintLastLog no
          # handled by PAM
          PrintMotd no
          Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
          MACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha2-256,hmac-sha2-512,umac-128-etm@openssh.com,umac-128@openssh.com
          KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256

          # Temporarily accept ssh-rsa algorithm for openssh >= 8.8,
          # until most ssh clients could deprecate ssh-rsa.
          HostkeyAlgorithms +ssh-rsa
          PubkeyAcceptedAlgorithms +ssh-rsa
          Include /etc/ssh/sshd_config.d/*.conf

          PermitRootLogin no
          PasswordAuthentication no
          ChallengeResponseAuthentication no
%{ endif }
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ${ssh_authorized_key}

